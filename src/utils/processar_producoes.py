## ðŸ“Œ 1. CÃ³digo para Processar ProduÃ§Ãµes AcadÃªmicas

import pandas as pd
import re

# ðŸ“Œ Carregar os dados do CSV original
df = pd.read_csv("data/alunos_com_lattes.csv", encoding="utf-8")

# ðŸ“Œ FunÃ§Ã£o para limpar e extrair informaÃ§Ãµes das produÃ§Ãµes
def extrair_dados_producao(texto_producao):
    if pd.isna(texto_producao) or texto_producao.strip() == "":
        return [("Sem ProduÃ§Ãµes", "Sem TÃ­tulo", "Sem Evento", "0000", "Sem Tipo")]

    # ðŸ”¹ Verificar se o cabeÃ§alho indica que o aluno tem produÃ§Ãµes
    tem_producao = "ProduÃ§Ã£o bibliogrÃ¡fica" in texto_producao

    # ðŸ”¹ ExpressÃ£o regular para capturar produÃ§Ãµes acadÃªmicas (buscando nÃºmeros no inÃ­cio)
    padrao = re.compile(r"^(\d+)\.\s*(.+?)\s*\.\s*(.+?)\s*In:\s*(.+?),\s*(\d{4})", re.MULTILINE)

    producoes = []
    
    for linha in texto_producao.split("\n\n"):  # Separar por quebras de linha duplas
        linha = linha.strip()
        match = padrao.search(linha)
        
        if match:
            numero = match.group(1).strip()
            autores = match.group(2).strip()
            titulo = match.group(3).strip()
            evento = match.group(4).strip()
            ano = match.group(5).strip()
            
            # ðŸ”¹ Identificar o tipo de produÃ§Ã£o
            if "Congresso" in evento or "Encontro" in evento or "SimpÃ³sio" in evento:
                tipo_producao = "Trabalho em Congresso"
            elif "Revista" in evento or "PeriÃ³dico" in evento:
                tipo_producao = "Artigo em PeriÃ³dico"
            elif "Resumo" in evento:
                tipo_producao = "Resumo em Congresso"
            else:
                tipo_producao = "Outros"
                
            producoes.append((autores, titulo, evento, ano, tipo_producao))
    
    if not producoes and tem_producao:
        producoes.append(("ProduÃ§Ã£o existente, mas nÃ£o reconhecida", "Sem TÃ­tulo", "Sem Evento", "0000", "Sem Tipo"))
    elif not producoes:
        producoes.append(("Sem ProduÃ§Ãµes", "Sem TÃ­tulo", "Sem Evento", "0000", "Sem Tipo"))

    return producoes

# ðŸ“Œ Criar um novo DataFrame para armazenar as produÃ§Ãµes
linhas_expandidas = []

for _, row in df.iterrows():
    aluno = row["Aluno"].strip()
    
    # ðŸ”¹ Ignorar registros invÃ¡lidos
    if aluno.lower() in ["Ã©tudiant/leader", "desconhecido", "sem aluno", "none", ""]:
        continue

    matricula = row["MatrÃ­cula"]
    ano_ingresso = row["Ano de Ingresso"]
    orientador = row["Orientador"]

    producoes = extrair_dados_producao(row.get("ProduÃ§Ãµes", ""))

    for autores, titulo, evento, ano, tipo_producao in producoes:
        linhas_expandidas.append([matricula, ano_ingresso, aluno, orientador, autores, titulo, evento, ano, tipo_producao])

# ðŸ“Œ Criando um novo DataFrame apenas para ProduÃ§Ãµes AcadÃªmicas
df_producoes = pd.DataFrame(linhas_expandidas, columns=["MatrÃ­cula", "Ano de Ingresso", "Aluno", "Orientador", "Autores", "TÃ­tulo", "Evento", "Ano", "Tipo de ProduÃ§Ã£o"])

# ðŸ“Œ Salvando os dados processados
df_producoes.to_csv("data/alunos_producoes_separadas.csv", index=False, encoding="utf-8")

print("âœ… Arquivo de ProduÃ§Ãµes gerado: 'alunos_producoes_separadas.csv'")


## ðŸ“Œ 2. CÃ³digo para Processar FormaÃ§Ãµes e PremiaÃ§Ãµes

# ðŸ“Œ Criar um novo DataFrame para FormaÃ§Ãµes e PremiaÃ§Ãµes (sem repetiÃ§Ã£o)
df_formacoes_premiacoes = df[["MatrÃ­cula", "Aluno", "Ano de Ingresso", "Orientador", "Lattes", "Resumo", "PremiaÃ§Ãµes", "FormaÃ§Ãµes"]].drop_duplicates()

# ðŸ“Œ Salvando os dados processados
df_formacoes_premiacoes.to_csv("data/alunos_formacoes_premiacoes.csv", index=False, encoding="utf-8")

print("âœ… Arquivo de FormaÃ§Ãµes e PremiaÃ§Ãµes gerado: 'alunos_formacoes_premiacoes.csv'")
